pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        PORT = ''
        IMAGE_NAME = ''
        CONTAINER_NAME = ''
    }

    stages {

stage('Set Environment Variables') {
            steps {
                script {
                    def imageName = ''
                    def port = ''
                    def containerName = ''

                    if (params.BRANCH_NAME == 'main') {
                        imageName = 'sarodriel/nodemain'
                        port = '3000'
                        containerName = 'my-manual-app-main'
                    } else if (params.BRANCH_NAME == 'dev') {
                        imageName = 'sarodriel/nodedev'
                        port = '3001'
                        containerName = 'my-manual-app-dev'
                    } else {
                        error "Branch no reconocido: ${params.BRANCH_NAME}"
                    }

                    echo "Usando imagen: ${imageName} en puerto: ${port}"

                    // Se guardan como variables del pipeline
                    currentBuild.description = "Branch: ${params.BRANCH_NAME}, Image: ${imageName}, Port: ${port}"
                    env.IMAGE_NAME = imageName
                    env.PORT = port
                    env.CONTAINER_NAME = containerName

                }
            }
        }


        stage('Checkout') {
            steps {
                script {
                    echo "Building branch: ${params.BRANCH_NAME}"
                }
                git branch: params.BRANCH_NAME, url: 'https://github.com/srodriguev/Lab3-IntegrationDelivery.git'
            }
        }

        stage('Select Logo') {
            steps {
                script {
                    if (params.BRANCH_NAME == 'main') {
                        sh 'cp public/main_logo.svg src/logo.svg'
                    } else if (params.BRANCH_NAME == 'dev') {
                        sh 'cp public/dev_logo.svg src/logo.svg'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh 'npm install'
                sh 'npm run build'
            }
        }

        stage('Test') {
            steps {
                sh 'chmod +x scripts/test.sh && scripts/test.sh'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "echo 'Image name: ${IMAGE_NAME}'"
                sh "docker build -t ${IMAGE_NAME}:latest ."
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh "docker push ${IMAGE_NAME}:latest"
            }
        }

        stage('Deploy') {
            steps {
                sh "docker stop ${CONTAINER_NAME} || true && docker rm ${CONTAINER_NAME} || true"
                sh "docker run -d --name ${CONTAINER_NAME} -p ${PORT}:${PORT} ${IMAGE_NAME}:latest"
            }
        }
    }
}
